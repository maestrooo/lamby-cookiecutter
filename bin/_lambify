#!/bin/sh
set -e

echo "== Running Lambify Script =="

PROJECT_FOLDER="{{cookiecutter.project_name}}"

# Many of these bin scripts facilitate usage of Docker. Take note
# of the convention where scripts with a leading _ are run inside
# the container. Exampele: the ./bin/test files calls ./bin/_test
# This means if you wanted to go platform native, sans-Docker, you
# can use the _ scripts directly. Details:
#
# - Project bootstrap & setup conventions.
# - Build and deploy scripts using SAM
# - Simple `./bin/server` and `./bin/test` wrappers.
# - Use `./bin/run` to run any ad-hoc command.
#
cp -r ./lambify/bin/* "${PROJECT_FOLDER}/bin"

# It is far easier to get started with basic a `SECRET_KEY_BASE`
# environment variable vs encrypted credentials. The value here is
# garbage and should be changed prior to real usage.
#
cp ./lambify/config/initializers/secret_key_base.rb "${PROJECT_FOLDER}/config/initializers"

# Create a simple qa env file derived from prod so
# you can deploy your stack for QA.
#
cp ./lambify/config/environments/qa.rb "${PROJECT_FOLDER}/config/environments"

# Add a getting started .env.development Dotenv file to be shared. Remember,
# your per-develooper over rides will go in .env.development.local. Also
# remember to add your own .env.test as needed.
#
cp ./lambify/.env.development "${PROJECT_FOLDER}/.env.development"

# The `app.rb` file is your entrypoint and handler.
#
cp ./lambify/app.rb "${PROJECT_FOLDER}/app.rb"

# These Docker files setup both a local development & build
# environment using docker-compose. The dev/build file is named
# `Dockerfile-build` and this is what compose uses. The main
# `Dockerfile` is used to build your production image. Keeping your
# image small and free of unneeded files is an important part
# of deploying containers. As such, this main Dockerfile does
# a simple copy of your built application into it.
#
cp ./lambify/Dockerfile "${PROJECT_FOLDER}/Dockerfile"
cp ./lambify/Dockerfile-build "${PROJECT_FOLDER}/Dockerfile-build"
cp ./lambify/docker-compose.yml "${PROJECT_FOLDER}/docker-compose.yml"

# We replace the Gemfile in whole for a few reasons:
#
# - Remove `ruby` declaration. Helps minor udpates
# - Add Lamby gem along with Dotenv.
# - Add lograge gem to reduce CloudWatch noise/costs.
#
cp ./lambify/Gemfile "$PROJECT_FOLDER/Gemfile"

# The `template.yaml` file is AWS SAM version of CloudFormation
# that describes how to package and run your Lambda.
#
cp ./lambify/template.yaml "$PROJECT_FOLDER/template.yaml"

# Demonstrate using good CI/CD practicues. Using GitHub Actions
# here for both a simple test and depploy workflow.
#
cp -r ./lambify/.github "$PROJECT_FOLDER"
